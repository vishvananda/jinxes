#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2012 Vishvananda Ishaya
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
"""
Simple example game for jinxes library
"""


import logging
import random

from jinxes import actor
from jinxes import application


class Word(actor.Actor):
    def __init__(self, app, x, y, text, current=None, life=20, bg=None):
        self.colors = [
                 16, 52, 88, 124, 160,
                 196, 202, 208, 214, 220,
                 226, 190, 154, 118, 82,
                 46, 83, 120, 157, 194,
                 231,
        ]
        self.life = life
        super(Word, self).__init__(app, x, y, text, current, bg=bg)
        # NOTE(vish): The above list can be generated with:
        # from jinxes import utils
        # self.colors = []
        # for i in xrange(21):
        #     if i > 15:
        #         red = i - 15
        #         green = 5
        #         blue = i - 15
        #     elif i > 10:
        #         red = 15 - i
        #         green = 5
        #         blue = 0
        #     elif i > 5:
        #         red = 5
        #         green = i - 5
        #         blue = 0
        #     else:
        #         red = i
        #         green = 0
        #         blue = 0
        #     color = utils.rgb_to_color(red, green, blue)
        #     self.colors.append(color)

    def set_life(self, life, current):
        self.life = life
        self.updated = current

    def get_ch(self, x, y):
        ch, fg, bg, inverted = super(Word, self).get_ch(x, y)
        color = self.colors[self.life]
        return ch, color, bg, inverted


class ViNav(application.Application):
    CRSR_COLOR = 4
    TEXT_COLOR = 15
    CRSR_CHAR = [u"\u263A"]
    UPDATE_TICKS = 5
    SPAWN_TICKS = 5
    SPAWN_NUMBER = 5
    NUM_WORDS = 80

    def __init__(self, scr):
        self.time_based = True
        self.frequency = 0.02
        self.init_markov()
        super(ViNav, self).__init__(scr)

    def initialize(self, current):
        super(ViNav, self).initialize(current)
        self.setup(current)

    def init_markov(self):
        with open('words.txt') as f:
            data = f.read().decode('utf-8', 'ignore')
        self.word_list = data.split()

        nonword = '\n'
        w1 = nonword
        w2 = nonword

        self.markov_table = {}

        for word in self.word_list:
            self.markov_table.setdefault((w1, w2), []).append(word)
            w1, w2 = w2, word

        self.markov_table.setdefault((w1, w2), []).append(nonword)

    def get_markov_words(self, numwords):
        nonword = '\n'
        w1, w2 = random.choice(self.markov_table.keys())
        words = []
        for i in xrange(numwords):
            newword = random.choice(self.markov_table[(w1, w2)])
            if newword == nonword:
                w2, newword = random.choice(self.markov_table.keys())
            words.append(newword)
            w1, w2 = w2, newword
        return words

    def setup(self, current):
        self.ticks = 0
        random.seed()
        self.words = {}
        words = self.get_markov_words(3000)
        self.text = []
        self.display = []
        line = []
        for word in words:
            line.append(word)
            if len(' '.join(line)) >= self.right:
                text = ' '.join(line[:-1])
                self.display.append(text + (self.right - len(text)) * ' ')
                line = [word]
            if len(self.display) == self.bottom + 1:
                break
        self.text = ' \n'.join([line.rstrip() for line in self.display])
        self.bg = actor.Actor(self, self.left, self.top, [self.display],
                                current, fg=self.TEXT_COLOR)
        self.bg.dirties = False
        self.bg.collides = False
        self.bg.z = 0
        self.crsr = actor.Actor(self, self.left, self.top, self.CRSR_CHAR,
                                current, bg=self.CRSR_COLOR)
        self.crsr.transparent = True
        self.crsr.z = 1
        self.updated = current
        self.paused = False

    def spawn_word(self, current):
        text = random.choice(self.word_list)
        text = random.choice((' ' + text, text, text + ' '))
        y = random.randint(self.top, self.bottom)
        x = random.randint(self.left, self.right - len(text))
        word = Word(self, x, y, text, current, bg=241,
                    life=random.randint(10, 20))
        word.collides = False
        word.ticks = self.ticks % self.UPDATE_TICKS
        word.z = 2
        word.bg = 12
        self.words[word.id] = word
        line = self.display[word.y]
        self.display[y] = line[:x] + text + line[x + len(text):]
        self.bg.display = [self.display]
        self.text = ' \n'.join([line.rstrip() for line in self.display])
        self.spawned = current

    def tick(self, current, delta):
        """Do frame actions"""
        if self.time_based and current - self.updated > self.frequency:
            self.game_tick(current)
        if self.updated == current:
            for key in list(self.words.iterkeys()):
                word = self.words[key]
                if (self.ticks + word.ticks) % self.UPDATE_TICKS == 0:
                    self.update_word(word, current)
            if self.ticks % self.SPAWN_TICKS == 0:
                for i in range(self.SPAWN_NUMBER):
                    self.spawn_word(current)

    def update_word(self, word, current):
        if word.life == 0:
            del self.words[word.id]
            word.destroy()
            return
        word.set_life(word.life - 1, current)

    def game_tick(self, current):
        self.ticks += 1
        self.updated = current

    def process_character(self, current, character):
        if not self.time_based:
            self.game_tick(current)
        super(ViNav, self).process_character(current, character)

    def handle_t(self, current):
        self.time_based = not self.time_based

    def handle_o(self, current):
        self.frequency += 0.001

    def handle_p(self, current):
        self.frequency -= 0.001

    def handle_k(self, current):
        self.crsr.move(current, self.crsr.x, self.crsr.y - 1)

    def handle_j(self, current):
        self.crsr.move(current, self.crsr.x, self.crsr.y + 1)

    def handle_h(self, current):
        self.crsr.move(current, self.crsr.x - 1, self.crsr.y)

    def handle_l(self, current):
        self.crsr.move(current, self.crsr.x + 1, self.crsr.y)

    def handle_q(self, current):
        raise application.Exit()

    def handle_r(self, current):
        if self.paused:
            self.initialize(current)

    def handle_resize(self, current):
        self.initialize(current)

    def collide(self, actor, other, current, collisions, floatx, floaty):
        return floatx, floaty


if __name__ == "__main__":
    logger = logging.getLogger('jinxes')
    hdlr = logging.FileHandler('jinxes.log')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.DEBUG)
    application.run(ViNav)
    with open('jinxes.log') as log:
        data = log.read()
        if data:
            print data
