#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2012 Vishvananda Ishaya
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
"""
Simple example game for jinxes library
"""


import logging
import random

from jinxes import actor
from jinxes import application
from jinxes import utils


class Wider(actor.Actor):
    """Actor that collides in a + pattern around location."""
    def collisions(self, x=None, y=None):
        if x is None:
            x = self.x
        if y is None:
            y = self.y
        lines = []
        lines.append('\0' + ' ' * self.hsize + '\0')
        for line in self.display:
            lines.append([' '] + line + [' '])
        lines.append('\0' + ' ' * self.hsize + '\0')
        coords = []
        for xoffset in xrange(self.hsize + 2):
            for yoffset in xrange(self.vsize + 2):
                if ord(lines[yoffset][xoffset]):
                    coords.append((x + xoffset - 1, y + yoffset - 1))
        return set(coords)


class Game(application.Application):
    WALL_COLOR = 5
    PLAYER_COLOR = 4
    GOAL_COLOR = 3
    PLR_CHAR = [u"\u263A"]
    MONSTER_CHAR = [u"\u2603"]
    GOAL_CHAR = [u"\u2624"]
    MONSTER_SLOWEST = 0.10
    MONSTER_FASTEST = 0.02
    NUM_MONSTERS = 60
    WIN_MSG = ["YOU WIN!!! (r to restart)"]
    LOSE_MSG = ["YOU LOSE!!! (r to restart)"]
    LOSE_COLOR = 1


    def initialize(self, current):
        super(Game, self).initialize(current)
        if hasattr(self, 'msg'):
            self.msg.destroy()
        self.border()
        self.setup(current)

    def setup(self, current):
        random.seed()
        self.monsters = {}
        for monster in xrange(self.NUM_MONSTERS):
            y = random.randint(self.top + 3, self.bottom)
            x = random.randint(self.left + 3, self.right)
            speed = random.uniform(0.0, 1.0)
            color = utils.rgb_to_color(5 - int(speed * 5), 0, 0)
            monster = Wider(self, x, y, self.MONSTER_CHAR,
                              current, fg=color)
            monster.frequency = (self.MONSTER_FASTEST + speed *
                                 (self.MONSTER_SLOWEST - self.MONSTER_FASTEST))
            self.monsters[monster.id] = monster
        self.plr = Wider(self, self.left, self.top, self.PLR_CHAR,
                               current, fg=self.PLAYER_COLOR)
        self.goal = actor.Actor(self, self.right, self.bottom, self.GOAL_CHAR,
                                current, fg=self.GOAL_COLOR)
        self.paused = False


    def tick(self, current, delta):
        """Do frame actions"""
        for monster in self.monsters.itervalues():
            if current - monster.updated > monster.frequency:
                direction = random.randint(1, 4)
                if direction == 1:
                    x, y = monster.x, monster.y - 1
                elif direction == 2:
                    x, y = monster.x, monster.y + 1
                elif direction == 3:
                    x, y = monster.x - 1, monster.y
                elif direction == 4:
                    x, y = monster.x + 1, monster.y
                monster.move(current, x, y)

    def handle_k(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x, self.plr.y - 1)

    def handle_j(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x, self.plr.y + 1)

    def handle_h(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x - 1, self.plr.y)

    def handle_l(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x + 1, self.plr.y)

    def handle_q(self, current):
        raise application.Exit()

    def handle_r(self, current):
        if self.paused:
            self.initialize(current)

    def handle_resize(self, current):
        self.initialize(current)

    def is_player(self, actor):
        return actor == self.plr

    def is_goal(self, actor):
        return actor == self.goal

    def is_monster(self, actor):
        return actor.id in self.monsters

    def collide(self, actor, other, current, collisions, floatx, floaty):
        if self.is_monster(actor) and self.is_monster(other):
            return actor.x != other.x and actor.y != other.y
        if self.is_monster(actor) and self.is_goal(other):
            return False
        if self.is_player(actor) and self.is_goal(other):
            if actor.x == other.x and actor.y == other.y:
                self.win()
            return True
        if (self.is_player(actor) and self.is_monster(other) or
           self.is_monster(actor) and self.is_player(other)):
            self.lose()
            return True
        return True

    def win(self):
        self.msg = actor.Actor(self, 3, 3, self.WIN_MSG, fg=self.GOAL_COLOR)
        self.paused = True

    def lose(self):
        self.msg = actor.Actor(self, 3, 3, self.LOSE_MSG, fg=self.LOSE_COLOR)
        self.paused = True


if __name__ == "__main__":
    logger = logging.getLogger('jinxes')
    hdlr = logging.FileHandler('jinxes.log')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.DEBUG)
    application.run(Game)
    with open('jinxes.log') as log:
        data = log.read()
        if data:
            print data
