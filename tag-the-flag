#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2012 Vishvananda Ishaya
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
"""
Simple example game for jinxes library
"""


import logging
import math
import random

from jinxes import actor
from jinxes import application
from jinxes import utils


class Wider(actor.Actor):
    """Actor that collides in a + pattern around location."""
    def collisions(self, x=None, y=None):
        screenx, screeny = self.app.project(self)
        if x is None:
            x = screenx
        if y is None:
            y = screeny
        lines = []
        lines.append('\0' + ' ' * self.hsize + '\0')
        for line in self.display:
            lines.append([' '] + line + [' '])
        lines.append('\0' + ' ' * self.hsize + '\0')
        coords = []
        for xoffset in xrange(self.hsize + 2):
            for yoffset in xrange(self.vsize + 2):
                if ord(lines[yoffset][xoffset]):
                    coords.append((x + xoffset - 1, y + yoffset - 1))
        return set(coords)


class Game(application.Application):
    PLAYER_COLOR = 4
    GOAL_COLOR = 3
    PLR_CHAR = [u"\u263A"]
    MONSTER_CHAR = [u"\u2603"]
    GOAL_CHAR = [u"\u2624"]
    MONSTER_MINVEL = -0.2
    MONSTER_MAXVEL = 0.2
    NUM_MONSTERS = 60
    WIN_MSG = ["YOU WIN!!! (r to restart)"]
    LOSE_MSG = ["YOU LOSE!!! (r to restart)"]
    LOSE_COLOR = 1


    def initialize(self, current):
        super(Game, self).initialize(current)
        if hasattr(self, 'msg'):
            self.msg.destroy()
        self.border()
        self.setup(current)

    def setup(self, current):
        sqr_min = self.MONSTER_MINVEL * self.MONSTER_MINVEL
        sqr_max = self.MONSTER_MAXVEL * self.MONSTER_MAXVEL
        max_sqr = sqr_max if sqr_max > sqr_min else sqr_min
        max_speed = math.sqrt(sqr_max + sqr_max)
        random.seed()
        self.monsters = {}
        for monster in xrange(self.NUM_MONSTERS):
            y = random.uniform(0.1, 0.99)
            x = random.uniform(0.1, 0.99)
            xvel = random.uniform(self.MONSTER_MINVEL, self.MONSTER_MAXVEL)
            yvel = random.uniform(self.MONSTER_MINVEL, self.MONSTER_MAXVEL)
            speed = math.sqrt(xvel * xvel + yvel * yvel)
            #raise Exception(speed, max_speed)
            color = utils.rgb_to_color(1 + int(speed * 5 / max_speed), 0, 0)
            monster = Wider(self, x, y, self.MONSTER_CHAR,
                              current, fg=color)
            monster.xvel = xvel
            monster.yvel = yvel
            self.monsters[monster.id] = monster
        self.plr = Wider(self, self.x1 / 2, self.y1 / 2, self.PLR_CHAR,
                               current, fg=self.PLAYER_COLOR)
        self.goal = actor.Actor(self, 1.0, 1.0, self.GOAL_CHAR,
                                current, fg=self.GOAL_COLOR)
        self.paused = False

    def restart(self, current):
        for actor in list(self.actors.itervalues()):
            actor.destroy()
        self.initialize(current)

    def handle_k(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x, self.plr.y - self.y1)

    def handle_j(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x, self.plr.y + self.y1)

    def handle_h(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x - self.x1, self.plr.y)

    def handle_l(self, current):
        if not self.paused:
            self.plr.move(current, self.plr.x + self.x1, self.plr.y)

    def handle_q(self, current):
        raise application.Exit()

    def handle_r(self, current):
        if self.paused:
            self.restart(current)

    def handle_resize(self, current):
        self.restart(current)

    def is_player(self, actor):
        return actor == self.plr

    def is_goal(self, actor):
        return actor == self.goal

    def is_monster(self, actor):
        return actor.id in self.monsters

    def collide(self, actor, other, current, collisions, floatx, floaty):
        screenx, screeny = self.project(actor, floatx, floaty)
        oscrx, oscry = self.project(other)
        if self.is_monster(actor) and self.is_monster(other):
            if screenx == oscrx and screeny == oscry:
                actor.xvel = -actor.xvel
                other.xvel = -other.xvel
                actor.yvel = -actor.yvel
                other.yvel = -other.yvel
                return False
            else:
                return True
        if self.is_monster(actor) and self.is_goal(other):
            if screenx == oscrx and screeny == oscry:
                actor.xvel = -actor.xvel
                other.xvel = -other.xvel
                actor.yvel = -actor.yvel
                other.yvel = -other.yvel
                return False
        if self.is_player(actor) and self.is_goal(other):
            if screenx == oscrx and screeny == oscry:
                self.win_game()
            return True
        if (self.is_player(actor) and self.is_monster(other) or
           self.is_monster(actor) and self.is_player(other)):
            self.lose_game()
            return True
        return True

    def win_game(self):
        self.msg = actor.Actor(self, 0.5, 0.5, self.WIN_MSG, fg=self.GOAL_COLOR)
        self.msg.z = 1
        self.paused = True

    def lose_game(self):
        self.msg = actor.Actor(self, 0.5, 0.5, self.LOSE_MSG, fg=self.LOSE_COLOR)
        self.msg.z = 1
        self.paused = True


if __name__ == "__main__":
    logger = logging.getLogger('jinxes')
    hdlr = logging.FileHandler('jinxes.log')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.DEBUG)
    application.run(Game)
    with open('jinxes.log') as log:
        data = log.read()
        if data:
            print data
